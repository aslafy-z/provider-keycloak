//go:build !ignore_autogenerated

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by controller-gen. DO NOT EDIT.

package v1alpha1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AuthenticationFlowBindingOverridesInitParameters) DeepCopyInto(out *AuthenticationFlowBindingOverridesInitParameters) {
	*out = *in
	if in.BrowserID != nil {
		in, out := &in.BrowserID, &out.BrowserID
		*out = new(string)
		**out = **in
	}
	if in.DirectGrantID != nil {
		in, out := &in.DirectGrantID, &out.DirectGrantID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AuthenticationFlowBindingOverridesInitParameters.
func (in *AuthenticationFlowBindingOverridesInitParameters) DeepCopy() *AuthenticationFlowBindingOverridesInitParameters {
	if in == nil {
		return nil
	}
	out := new(AuthenticationFlowBindingOverridesInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AuthenticationFlowBindingOverridesObservation) DeepCopyInto(out *AuthenticationFlowBindingOverridesObservation) {
	*out = *in
	if in.BrowserID != nil {
		in, out := &in.BrowserID, &out.BrowserID
		*out = new(string)
		**out = **in
	}
	if in.DirectGrantID != nil {
		in, out := &in.DirectGrantID, &out.DirectGrantID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AuthenticationFlowBindingOverridesObservation.
func (in *AuthenticationFlowBindingOverridesObservation) DeepCopy() *AuthenticationFlowBindingOverridesObservation {
	if in == nil {
		return nil
	}
	out := new(AuthenticationFlowBindingOverridesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AuthenticationFlowBindingOverridesParameters) DeepCopyInto(out *AuthenticationFlowBindingOverridesParameters) {
	*out = *in
	if in.BrowserID != nil {
		in, out := &in.BrowserID, &out.BrowserID
		*out = new(string)
		**out = **in
	}
	if in.DirectGrantID != nil {
		in, out := &in.DirectGrantID, &out.DirectGrantID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AuthenticationFlowBindingOverridesParameters.
func (in *AuthenticationFlowBindingOverridesParameters) DeepCopy() *AuthenticationFlowBindingOverridesParameters {
	if in == nil {
		return nil
	}
	out := new(AuthenticationFlowBindingOverridesParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AuthorizationInitParameters) DeepCopyInto(out *AuthorizationInitParameters) {
	*out = *in
	if in.AllowRemoteResourceManagement != nil {
		in, out := &in.AllowRemoteResourceManagement, &out.AllowRemoteResourceManagement
		*out = new(bool)
		**out = **in
	}
	if in.DecisionStrategy != nil {
		in, out := &in.DecisionStrategy, &out.DecisionStrategy
		*out = new(string)
		**out = **in
	}
	if in.KeepDefaults != nil {
		in, out := &in.KeepDefaults, &out.KeepDefaults
		*out = new(bool)
		**out = **in
	}
	if in.PolicyEnforcementMode != nil {
		in, out := &in.PolicyEnforcementMode, &out.PolicyEnforcementMode
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AuthorizationInitParameters.
func (in *AuthorizationInitParameters) DeepCopy() *AuthorizationInitParameters {
	if in == nil {
		return nil
	}
	out := new(AuthorizationInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AuthorizationObservation) DeepCopyInto(out *AuthorizationObservation) {
	*out = *in
	if in.AllowRemoteResourceManagement != nil {
		in, out := &in.AllowRemoteResourceManagement, &out.AllowRemoteResourceManagement
		*out = new(bool)
		**out = **in
	}
	if in.DecisionStrategy != nil {
		in, out := &in.DecisionStrategy, &out.DecisionStrategy
		*out = new(string)
		**out = **in
	}
	if in.KeepDefaults != nil {
		in, out := &in.KeepDefaults, &out.KeepDefaults
		*out = new(bool)
		**out = **in
	}
	if in.PolicyEnforcementMode != nil {
		in, out := &in.PolicyEnforcementMode, &out.PolicyEnforcementMode
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AuthorizationObservation.
func (in *AuthorizationObservation) DeepCopy() *AuthorizationObservation {
	if in == nil {
		return nil
	}
	out := new(AuthorizationObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AuthorizationParameters) DeepCopyInto(out *AuthorizationParameters) {
	*out = *in
	if in.AllowRemoteResourceManagement != nil {
		in, out := &in.AllowRemoteResourceManagement, &out.AllowRemoteResourceManagement
		*out = new(bool)
		**out = **in
	}
	if in.DecisionStrategy != nil {
		in, out := &in.DecisionStrategy, &out.DecisionStrategy
		*out = new(string)
		**out = **in
	}
	if in.KeepDefaults != nil {
		in, out := &in.KeepDefaults, &out.KeepDefaults
		*out = new(bool)
		**out = **in
	}
	if in.PolicyEnforcementMode != nil {
		in, out := &in.PolicyEnforcementMode, &out.PolicyEnforcementMode
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AuthorizationParameters.
func (in *AuthorizationParameters) DeepCopy() *AuthorizationParameters {
	if in == nil {
		return nil
	}
	out := new(AuthorizationParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OpenIdClient) DeepCopyInto(out *OpenIdClient) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OpenIdClient.
func (in *OpenIdClient) DeepCopy() *OpenIdClient {
	if in == nil {
		return nil
	}
	out := new(OpenIdClient)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *OpenIdClient) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OpenIdClientInitParameters) DeepCopyInto(out *OpenIdClientInitParameters) {
	*out = *in
	if in.AccessTokenLifespan != nil {
		in, out := &in.AccessTokenLifespan, &out.AccessTokenLifespan
		*out = new(string)
		**out = **in
	}
	if in.AccessType != nil {
		in, out := &in.AccessType, &out.AccessType
		*out = new(string)
		**out = **in
	}
	if in.AdminURL != nil {
		in, out := &in.AdminURL, &out.AdminURL
		*out = new(string)
		**out = **in
	}
	if in.AuthenticationFlowBindingOverrides != nil {
		in, out := &in.AuthenticationFlowBindingOverrides, &out.AuthenticationFlowBindingOverrides
		*out = make([]AuthenticationFlowBindingOverridesInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Authorization != nil {
		in, out := &in.Authorization, &out.Authorization
		*out = make([]AuthorizationInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.BackchannelLogoutRevokeOfflineSessions != nil {
		in, out := &in.BackchannelLogoutRevokeOfflineSessions, &out.BackchannelLogoutRevokeOfflineSessions
		*out = new(bool)
		**out = **in
	}
	if in.BackchannelLogoutSessionRequired != nil {
		in, out := &in.BackchannelLogoutSessionRequired, &out.BackchannelLogoutSessionRequired
		*out = new(bool)
		**out = **in
	}
	if in.BackchannelLogoutURL != nil {
		in, out := &in.BackchannelLogoutURL, &out.BackchannelLogoutURL
		*out = new(string)
		**out = **in
	}
	if in.BaseURL != nil {
		in, out := &in.BaseURL, &out.BaseURL
		*out = new(string)
		**out = **in
	}
	if in.ClientAuthenticatorType != nil {
		in, out := &in.ClientAuthenticatorType, &out.ClientAuthenticatorType
		*out = new(string)
		**out = **in
	}
	if in.ClientID != nil {
		in, out := &in.ClientID, &out.ClientID
		*out = new(string)
		**out = **in
	}
	if in.ClientIDRef != nil {
		in, out := &in.ClientIDRef, &out.ClientIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ClientIDSelector != nil {
		in, out := &in.ClientIDSelector, &out.ClientIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.ClientOfflineSessionIdleTimeout != nil {
		in, out := &in.ClientOfflineSessionIdleTimeout, &out.ClientOfflineSessionIdleTimeout
		*out = new(string)
		**out = **in
	}
	if in.ClientOfflineSessionMaxLifespan != nil {
		in, out := &in.ClientOfflineSessionMaxLifespan, &out.ClientOfflineSessionMaxLifespan
		*out = new(string)
		**out = **in
	}
	if in.ClientSecretSecretRef != nil {
		in, out := &in.ClientSecretSecretRef, &out.ClientSecretSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.ClientSessionIdleTimeout != nil {
		in, out := &in.ClientSessionIdleTimeout, &out.ClientSessionIdleTimeout
		*out = new(string)
		**out = **in
	}
	if in.ClientSessionMaxLifespan != nil {
		in, out := &in.ClientSessionMaxLifespan, &out.ClientSessionMaxLifespan
		*out = new(string)
		**out = **in
	}
	if in.ConsentRequired != nil {
		in, out := &in.ConsentRequired, &out.ConsentRequired
		*out = new(bool)
		**out = **in
	}
	if in.ConsentScreenText != nil {
		in, out := &in.ConsentScreenText, &out.ConsentScreenText
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DirectAccessGrantsEnabled != nil {
		in, out := &in.DirectAccessGrantsEnabled, &out.DirectAccessGrantsEnabled
		*out = new(bool)
		**out = **in
	}
	if in.DisplayOnConsentScreen != nil {
		in, out := &in.DisplayOnConsentScreen, &out.DisplayOnConsentScreen
		*out = new(bool)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.ExcludeSessionStateFromAuthResponse != nil {
		in, out := &in.ExcludeSessionStateFromAuthResponse, &out.ExcludeSessionStateFromAuthResponse
		*out = new(bool)
		**out = **in
	}
	if in.ExtraConfig != nil {
		in, out := &in.ExtraConfig, &out.ExtraConfig
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.FrontchannelLogoutEnabled != nil {
		in, out := &in.FrontchannelLogoutEnabled, &out.FrontchannelLogoutEnabled
		*out = new(bool)
		**out = **in
	}
	if in.FrontchannelLogoutURL != nil {
		in, out := &in.FrontchannelLogoutURL, &out.FrontchannelLogoutURL
		*out = new(string)
		**out = **in
	}
	if in.FullScopeAllowed != nil {
		in, out := &in.FullScopeAllowed, &out.FullScopeAllowed
		*out = new(bool)
		**out = **in
	}
	if in.ImplicitFlowEnabled != nil {
		in, out := &in.ImplicitFlowEnabled, &out.ImplicitFlowEnabled
		*out = new(bool)
		**out = **in
	}
	if in.Import != nil {
		in, out := &in.Import, &out.Import
		*out = new(bool)
		**out = **in
	}
	if in.LoginTheme != nil {
		in, out := &in.LoginTheme, &out.LoginTheme
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Oauth2DeviceAuthorizationGrantEnabled != nil {
		in, out := &in.Oauth2DeviceAuthorizationGrantEnabled, &out.Oauth2DeviceAuthorizationGrantEnabled
		*out = new(bool)
		**out = **in
	}
	if in.Oauth2DeviceCodeLifespan != nil {
		in, out := &in.Oauth2DeviceCodeLifespan, &out.Oauth2DeviceCodeLifespan
		*out = new(string)
		**out = **in
	}
	if in.Oauth2DevicePollingInterval != nil {
		in, out := &in.Oauth2DevicePollingInterval, &out.Oauth2DevicePollingInterval
		*out = new(string)
		**out = **in
	}
	if in.PkceCodeChallengeMethod != nil {
		in, out := &in.PkceCodeChallengeMethod, &out.PkceCodeChallengeMethod
		*out = new(string)
		**out = **in
	}
	if in.RealmID != nil {
		in, out := &in.RealmID, &out.RealmID
		*out = new(string)
		**out = **in
	}
	if in.RealmIDRef != nil {
		in, out := &in.RealmIDRef, &out.RealmIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.RealmIDSelector != nil {
		in, out := &in.RealmIDSelector, &out.RealmIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.RootURL != nil {
		in, out := &in.RootURL, &out.RootURL
		*out = new(string)
		**out = **in
	}
	if in.ServiceAccountsEnabled != nil {
		in, out := &in.ServiceAccountsEnabled, &out.ServiceAccountsEnabled
		*out = new(bool)
		**out = **in
	}
	if in.StandardFlowEnabled != nil {
		in, out := &in.StandardFlowEnabled, &out.StandardFlowEnabled
		*out = new(bool)
		**out = **in
	}
	if in.UseRefreshTokens != nil {
		in, out := &in.UseRefreshTokens, &out.UseRefreshTokens
		*out = new(bool)
		**out = **in
	}
	if in.UseRefreshTokensClientCredentials != nil {
		in, out := &in.UseRefreshTokensClientCredentials, &out.UseRefreshTokensClientCredentials
		*out = new(bool)
		**out = **in
	}
	if in.ValidPostLogoutRedirectUris != nil {
		in, out := &in.ValidPostLogoutRedirectUris, &out.ValidPostLogoutRedirectUris
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ValidRedirectUris != nil {
		in, out := &in.ValidRedirectUris, &out.ValidRedirectUris
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.WebOrigins != nil {
		in, out := &in.WebOrigins, &out.WebOrigins
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OpenIdClientInitParameters.
func (in *OpenIdClientInitParameters) DeepCopy() *OpenIdClientInitParameters {
	if in == nil {
		return nil
	}
	out := new(OpenIdClientInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OpenIdClientList) DeepCopyInto(out *OpenIdClientList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]OpenIdClient, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OpenIdClientList.
func (in *OpenIdClientList) DeepCopy() *OpenIdClientList {
	if in == nil {
		return nil
	}
	out := new(OpenIdClientList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *OpenIdClientList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OpenIdClientObservation) DeepCopyInto(out *OpenIdClientObservation) {
	*out = *in
	if in.AccessTokenLifespan != nil {
		in, out := &in.AccessTokenLifespan, &out.AccessTokenLifespan
		*out = new(string)
		**out = **in
	}
	if in.AccessType != nil {
		in, out := &in.AccessType, &out.AccessType
		*out = new(string)
		**out = **in
	}
	if in.AdminURL != nil {
		in, out := &in.AdminURL, &out.AdminURL
		*out = new(string)
		**out = **in
	}
	if in.AuthenticationFlowBindingOverrides != nil {
		in, out := &in.AuthenticationFlowBindingOverrides, &out.AuthenticationFlowBindingOverrides
		*out = make([]AuthenticationFlowBindingOverridesObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Authorization != nil {
		in, out := &in.Authorization, &out.Authorization
		*out = make([]AuthorizationObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.BackchannelLogoutRevokeOfflineSessions != nil {
		in, out := &in.BackchannelLogoutRevokeOfflineSessions, &out.BackchannelLogoutRevokeOfflineSessions
		*out = new(bool)
		**out = **in
	}
	if in.BackchannelLogoutSessionRequired != nil {
		in, out := &in.BackchannelLogoutSessionRequired, &out.BackchannelLogoutSessionRequired
		*out = new(bool)
		**out = **in
	}
	if in.BackchannelLogoutURL != nil {
		in, out := &in.BackchannelLogoutURL, &out.BackchannelLogoutURL
		*out = new(string)
		**out = **in
	}
	if in.BaseURL != nil {
		in, out := &in.BaseURL, &out.BaseURL
		*out = new(string)
		**out = **in
	}
	if in.ClientAuthenticatorType != nil {
		in, out := &in.ClientAuthenticatorType, &out.ClientAuthenticatorType
		*out = new(string)
		**out = **in
	}
	if in.ClientID != nil {
		in, out := &in.ClientID, &out.ClientID
		*out = new(string)
		**out = **in
	}
	if in.ClientOfflineSessionIdleTimeout != nil {
		in, out := &in.ClientOfflineSessionIdleTimeout, &out.ClientOfflineSessionIdleTimeout
		*out = new(string)
		**out = **in
	}
	if in.ClientOfflineSessionMaxLifespan != nil {
		in, out := &in.ClientOfflineSessionMaxLifespan, &out.ClientOfflineSessionMaxLifespan
		*out = new(string)
		**out = **in
	}
	if in.ClientSessionIdleTimeout != nil {
		in, out := &in.ClientSessionIdleTimeout, &out.ClientSessionIdleTimeout
		*out = new(string)
		**out = **in
	}
	if in.ClientSessionMaxLifespan != nil {
		in, out := &in.ClientSessionMaxLifespan, &out.ClientSessionMaxLifespan
		*out = new(string)
		**out = **in
	}
	if in.ConsentRequired != nil {
		in, out := &in.ConsentRequired, &out.ConsentRequired
		*out = new(bool)
		**out = **in
	}
	if in.ConsentScreenText != nil {
		in, out := &in.ConsentScreenText, &out.ConsentScreenText
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DirectAccessGrantsEnabled != nil {
		in, out := &in.DirectAccessGrantsEnabled, &out.DirectAccessGrantsEnabled
		*out = new(bool)
		**out = **in
	}
	if in.DisplayOnConsentScreen != nil {
		in, out := &in.DisplayOnConsentScreen, &out.DisplayOnConsentScreen
		*out = new(bool)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.ExcludeSessionStateFromAuthResponse != nil {
		in, out := &in.ExcludeSessionStateFromAuthResponse, &out.ExcludeSessionStateFromAuthResponse
		*out = new(bool)
		**out = **in
	}
	if in.ExtraConfig != nil {
		in, out := &in.ExtraConfig, &out.ExtraConfig
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.FrontchannelLogoutEnabled != nil {
		in, out := &in.FrontchannelLogoutEnabled, &out.FrontchannelLogoutEnabled
		*out = new(bool)
		**out = **in
	}
	if in.FrontchannelLogoutURL != nil {
		in, out := &in.FrontchannelLogoutURL, &out.FrontchannelLogoutURL
		*out = new(string)
		**out = **in
	}
	if in.FullScopeAllowed != nil {
		in, out := &in.FullScopeAllowed, &out.FullScopeAllowed
		*out = new(bool)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.ImplicitFlowEnabled != nil {
		in, out := &in.ImplicitFlowEnabled, &out.ImplicitFlowEnabled
		*out = new(bool)
		**out = **in
	}
	if in.Import != nil {
		in, out := &in.Import, &out.Import
		*out = new(bool)
		**out = **in
	}
	if in.LoginTheme != nil {
		in, out := &in.LoginTheme, &out.LoginTheme
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Oauth2DeviceAuthorizationGrantEnabled != nil {
		in, out := &in.Oauth2DeviceAuthorizationGrantEnabled, &out.Oauth2DeviceAuthorizationGrantEnabled
		*out = new(bool)
		**out = **in
	}
	if in.Oauth2DeviceCodeLifespan != nil {
		in, out := &in.Oauth2DeviceCodeLifespan, &out.Oauth2DeviceCodeLifespan
		*out = new(string)
		**out = **in
	}
	if in.Oauth2DevicePollingInterval != nil {
		in, out := &in.Oauth2DevicePollingInterval, &out.Oauth2DevicePollingInterval
		*out = new(string)
		**out = **in
	}
	if in.PkceCodeChallengeMethod != nil {
		in, out := &in.PkceCodeChallengeMethod, &out.PkceCodeChallengeMethod
		*out = new(string)
		**out = **in
	}
	if in.RealmID != nil {
		in, out := &in.RealmID, &out.RealmID
		*out = new(string)
		**out = **in
	}
	if in.ResourceServerID != nil {
		in, out := &in.ResourceServerID, &out.ResourceServerID
		*out = new(string)
		**out = **in
	}
	if in.RootURL != nil {
		in, out := &in.RootURL, &out.RootURL
		*out = new(string)
		**out = **in
	}
	if in.ServiceAccountUserID != nil {
		in, out := &in.ServiceAccountUserID, &out.ServiceAccountUserID
		*out = new(string)
		**out = **in
	}
	if in.ServiceAccountsEnabled != nil {
		in, out := &in.ServiceAccountsEnabled, &out.ServiceAccountsEnabled
		*out = new(bool)
		**out = **in
	}
	if in.StandardFlowEnabled != nil {
		in, out := &in.StandardFlowEnabled, &out.StandardFlowEnabled
		*out = new(bool)
		**out = **in
	}
	if in.UseRefreshTokens != nil {
		in, out := &in.UseRefreshTokens, &out.UseRefreshTokens
		*out = new(bool)
		**out = **in
	}
	if in.UseRefreshTokensClientCredentials != nil {
		in, out := &in.UseRefreshTokensClientCredentials, &out.UseRefreshTokensClientCredentials
		*out = new(bool)
		**out = **in
	}
	if in.ValidPostLogoutRedirectUris != nil {
		in, out := &in.ValidPostLogoutRedirectUris, &out.ValidPostLogoutRedirectUris
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ValidRedirectUris != nil {
		in, out := &in.ValidRedirectUris, &out.ValidRedirectUris
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.WebOrigins != nil {
		in, out := &in.WebOrigins, &out.WebOrigins
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OpenIdClientObservation.
func (in *OpenIdClientObservation) DeepCopy() *OpenIdClientObservation {
	if in == nil {
		return nil
	}
	out := new(OpenIdClientObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OpenIdClientParameters) DeepCopyInto(out *OpenIdClientParameters) {
	*out = *in
	if in.AccessTokenLifespan != nil {
		in, out := &in.AccessTokenLifespan, &out.AccessTokenLifespan
		*out = new(string)
		**out = **in
	}
	if in.AccessType != nil {
		in, out := &in.AccessType, &out.AccessType
		*out = new(string)
		**out = **in
	}
	if in.AdminURL != nil {
		in, out := &in.AdminURL, &out.AdminURL
		*out = new(string)
		**out = **in
	}
	if in.AuthenticationFlowBindingOverrides != nil {
		in, out := &in.AuthenticationFlowBindingOverrides, &out.AuthenticationFlowBindingOverrides
		*out = make([]AuthenticationFlowBindingOverridesParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Authorization != nil {
		in, out := &in.Authorization, &out.Authorization
		*out = make([]AuthorizationParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.BackchannelLogoutRevokeOfflineSessions != nil {
		in, out := &in.BackchannelLogoutRevokeOfflineSessions, &out.BackchannelLogoutRevokeOfflineSessions
		*out = new(bool)
		**out = **in
	}
	if in.BackchannelLogoutSessionRequired != nil {
		in, out := &in.BackchannelLogoutSessionRequired, &out.BackchannelLogoutSessionRequired
		*out = new(bool)
		**out = **in
	}
	if in.BackchannelLogoutURL != nil {
		in, out := &in.BackchannelLogoutURL, &out.BackchannelLogoutURL
		*out = new(string)
		**out = **in
	}
	if in.BaseURL != nil {
		in, out := &in.BaseURL, &out.BaseURL
		*out = new(string)
		**out = **in
	}
	if in.ClientAuthenticatorType != nil {
		in, out := &in.ClientAuthenticatorType, &out.ClientAuthenticatorType
		*out = new(string)
		**out = **in
	}
	if in.ClientID != nil {
		in, out := &in.ClientID, &out.ClientID
		*out = new(string)
		**out = **in
	}
	if in.ClientIDRef != nil {
		in, out := &in.ClientIDRef, &out.ClientIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ClientIDSelector != nil {
		in, out := &in.ClientIDSelector, &out.ClientIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.ClientOfflineSessionIdleTimeout != nil {
		in, out := &in.ClientOfflineSessionIdleTimeout, &out.ClientOfflineSessionIdleTimeout
		*out = new(string)
		**out = **in
	}
	if in.ClientOfflineSessionMaxLifespan != nil {
		in, out := &in.ClientOfflineSessionMaxLifespan, &out.ClientOfflineSessionMaxLifespan
		*out = new(string)
		**out = **in
	}
	if in.ClientSecretSecretRef != nil {
		in, out := &in.ClientSecretSecretRef, &out.ClientSecretSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.ClientSessionIdleTimeout != nil {
		in, out := &in.ClientSessionIdleTimeout, &out.ClientSessionIdleTimeout
		*out = new(string)
		**out = **in
	}
	if in.ClientSessionMaxLifespan != nil {
		in, out := &in.ClientSessionMaxLifespan, &out.ClientSessionMaxLifespan
		*out = new(string)
		**out = **in
	}
	if in.ConsentRequired != nil {
		in, out := &in.ConsentRequired, &out.ConsentRequired
		*out = new(bool)
		**out = **in
	}
	if in.ConsentScreenText != nil {
		in, out := &in.ConsentScreenText, &out.ConsentScreenText
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DirectAccessGrantsEnabled != nil {
		in, out := &in.DirectAccessGrantsEnabled, &out.DirectAccessGrantsEnabled
		*out = new(bool)
		**out = **in
	}
	if in.DisplayOnConsentScreen != nil {
		in, out := &in.DisplayOnConsentScreen, &out.DisplayOnConsentScreen
		*out = new(bool)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.ExcludeSessionStateFromAuthResponse != nil {
		in, out := &in.ExcludeSessionStateFromAuthResponse, &out.ExcludeSessionStateFromAuthResponse
		*out = new(bool)
		**out = **in
	}
	if in.ExtraConfig != nil {
		in, out := &in.ExtraConfig, &out.ExtraConfig
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.FrontchannelLogoutEnabled != nil {
		in, out := &in.FrontchannelLogoutEnabled, &out.FrontchannelLogoutEnabled
		*out = new(bool)
		**out = **in
	}
	if in.FrontchannelLogoutURL != nil {
		in, out := &in.FrontchannelLogoutURL, &out.FrontchannelLogoutURL
		*out = new(string)
		**out = **in
	}
	if in.FullScopeAllowed != nil {
		in, out := &in.FullScopeAllowed, &out.FullScopeAllowed
		*out = new(bool)
		**out = **in
	}
	if in.ImplicitFlowEnabled != nil {
		in, out := &in.ImplicitFlowEnabled, &out.ImplicitFlowEnabled
		*out = new(bool)
		**out = **in
	}
	if in.Import != nil {
		in, out := &in.Import, &out.Import
		*out = new(bool)
		**out = **in
	}
	if in.LoginTheme != nil {
		in, out := &in.LoginTheme, &out.LoginTheme
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Oauth2DeviceAuthorizationGrantEnabled != nil {
		in, out := &in.Oauth2DeviceAuthorizationGrantEnabled, &out.Oauth2DeviceAuthorizationGrantEnabled
		*out = new(bool)
		**out = **in
	}
	if in.Oauth2DeviceCodeLifespan != nil {
		in, out := &in.Oauth2DeviceCodeLifespan, &out.Oauth2DeviceCodeLifespan
		*out = new(string)
		**out = **in
	}
	if in.Oauth2DevicePollingInterval != nil {
		in, out := &in.Oauth2DevicePollingInterval, &out.Oauth2DevicePollingInterval
		*out = new(string)
		**out = **in
	}
	if in.PkceCodeChallengeMethod != nil {
		in, out := &in.PkceCodeChallengeMethod, &out.PkceCodeChallengeMethod
		*out = new(string)
		**out = **in
	}
	if in.RealmID != nil {
		in, out := &in.RealmID, &out.RealmID
		*out = new(string)
		**out = **in
	}
	if in.RealmIDRef != nil {
		in, out := &in.RealmIDRef, &out.RealmIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.RealmIDSelector != nil {
		in, out := &in.RealmIDSelector, &out.RealmIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.RootURL != nil {
		in, out := &in.RootURL, &out.RootURL
		*out = new(string)
		**out = **in
	}
	if in.ServiceAccountsEnabled != nil {
		in, out := &in.ServiceAccountsEnabled, &out.ServiceAccountsEnabled
		*out = new(bool)
		**out = **in
	}
	if in.StandardFlowEnabled != nil {
		in, out := &in.StandardFlowEnabled, &out.StandardFlowEnabled
		*out = new(bool)
		**out = **in
	}
	if in.UseRefreshTokens != nil {
		in, out := &in.UseRefreshTokens, &out.UseRefreshTokens
		*out = new(bool)
		**out = **in
	}
	if in.UseRefreshTokensClientCredentials != nil {
		in, out := &in.UseRefreshTokensClientCredentials, &out.UseRefreshTokensClientCredentials
		*out = new(bool)
		**out = **in
	}
	if in.ValidPostLogoutRedirectUris != nil {
		in, out := &in.ValidPostLogoutRedirectUris, &out.ValidPostLogoutRedirectUris
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ValidRedirectUris != nil {
		in, out := &in.ValidRedirectUris, &out.ValidRedirectUris
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.WebOrigins != nil {
		in, out := &in.WebOrigins, &out.WebOrigins
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OpenIdClientParameters.
func (in *OpenIdClientParameters) DeepCopy() *OpenIdClientParameters {
	if in == nil {
		return nil
	}
	out := new(OpenIdClientParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OpenIdClientSpec) DeepCopyInto(out *OpenIdClientSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OpenIdClientSpec.
func (in *OpenIdClientSpec) DeepCopy() *OpenIdClientSpec {
	if in == nil {
		return nil
	}
	out := new(OpenIdClientSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OpenIdClientStatus) DeepCopyInto(out *OpenIdClientStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OpenIdClientStatus.
func (in *OpenIdClientStatus) DeepCopy() *OpenIdClientStatus {
	if in == nil {
		return nil
	}
	out := new(OpenIdClientStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SamlClient) DeepCopyInto(out *SamlClient) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SamlClient.
func (in *SamlClient) DeepCopy() *SamlClient {
	if in == nil {
		return nil
	}
	out := new(SamlClient)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *SamlClient) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SamlClientAuthenticationFlowBindingOverridesInitParameters) DeepCopyInto(out *SamlClientAuthenticationFlowBindingOverridesInitParameters) {
	*out = *in
	if in.BrowserID != nil {
		in, out := &in.BrowserID, &out.BrowserID
		*out = new(string)
		**out = **in
	}
	if in.DirectGrantID != nil {
		in, out := &in.DirectGrantID, &out.DirectGrantID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SamlClientAuthenticationFlowBindingOverridesInitParameters.
func (in *SamlClientAuthenticationFlowBindingOverridesInitParameters) DeepCopy() *SamlClientAuthenticationFlowBindingOverridesInitParameters {
	if in == nil {
		return nil
	}
	out := new(SamlClientAuthenticationFlowBindingOverridesInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SamlClientAuthenticationFlowBindingOverridesObservation) DeepCopyInto(out *SamlClientAuthenticationFlowBindingOverridesObservation) {
	*out = *in
	if in.BrowserID != nil {
		in, out := &in.BrowserID, &out.BrowserID
		*out = new(string)
		**out = **in
	}
	if in.DirectGrantID != nil {
		in, out := &in.DirectGrantID, &out.DirectGrantID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SamlClientAuthenticationFlowBindingOverridesObservation.
func (in *SamlClientAuthenticationFlowBindingOverridesObservation) DeepCopy() *SamlClientAuthenticationFlowBindingOverridesObservation {
	if in == nil {
		return nil
	}
	out := new(SamlClientAuthenticationFlowBindingOverridesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SamlClientAuthenticationFlowBindingOverridesParameters) DeepCopyInto(out *SamlClientAuthenticationFlowBindingOverridesParameters) {
	*out = *in
	if in.BrowserID != nil {
		in, out := &in.BrowserID, &out.BrowserID
		*out = new(string)
		**out = **in
	}
	if in.DirectGrantID != nil {
		in, out := &in.DirectGrantID, &out.DirectGrantID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SamlClientAuthenticationFlowBindingOverridesParameters.
func (in *SamlClientAuthenticationFlowBindingOverridesParameters) DeepCopy() *SamlClientAuthenticationFlowBindingOverridesParameters {
	if in == nil {
		return nil
	}
	out := new(SamlClientAuthenticationFlowBindingOverridesParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SamlClientInitParameters) DeepCopyInto(out *SamlClientInitParameters) {
	*out = *in
	if in.AssertionConsumerPostURL != nil {
		in, out := &in.AssertionConsumerPostURL, &out.AssertionConsumerPostURL
		*out = new(string)
		**out = **in
	}
	if in.AssertionConsumerRedirectURL != nil {
		in, out := &in.AssertionConsumerRedirectURL, &out.AssertionConsumerRedirectURL
		*out = new(string)
		**out = **in
	}
	if in.AuthenticationFlowBindingOverrides != nil {
		in, out := &in.AuthenticationFlowBindingOverrides, &out.AuthenticationFlowBindingOverrides
		*out = make([]SamlClientAuthenticationFlowBindingOverridesInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.BaseURL != nil {
		in, out := &in.BaseURL, &out.BaseURL
		*out = new(string)
		**out = **in
	}
	if in.CanonicalizationMethod != nil {
		in, out := &in.CanonicalizationMethod, &out.CanonicalizationMethod
		*out = new(string)
		**out = **in
	}
	if in.ClientID != nil {
		in, out := &in.ClientID, &out.ClientID
		*out = new(string)
		**out = **in
	}
	if in.ClientIDRef != nil {
		in, out := &in.ClientIDRef, &out.ClientIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ClientIDSelector != nil {
		in, out := &in.ClientIDSelector, &out.ClientIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.ClientSignatureRequired != nil {
		in, out := &in.ClientSignatureRequired, &out.ClientSignatureRequired
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.EncryptAssertions != nil {
		in, out := &in.EncryptAssertions, &out.EncryptAssertions
		*out = new(bool)
		**out = **in
	}
	if in.EncryptionCertificate != nil {
		in, out := &in.EncryptionCertificate, &out.EncryptionCertificate
		*out = new(string)
		**out = **in
	}
	if in.ExtraConfig != nil {
		in, out := &in.ExtraConfig, &out.ExtraConfig
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.ForceNameIDFormat != nil {
		in, out := &in.ForceNameIDFormat, &out.ForceNameIDFormat
		*out = new(bool)
		**out = **in
	}
	if in.ForcePostBinding != nil {
		in, out := &in.ForcePostBinding, &out.ForcePostBinding
		*out = new(bool)
		**out = **in
	}
	if in.FrontChannelLogout != nil {
		in, out := &in.FrontChannelLogout, &out.FrontChannelLogout
		*out = new(bool)
		**out = **in
	}
	if in.FullScopeAllowed != nil {
		in, out := &in.FullScopeAllowed, &out.FullScopeAllowed
		*out = new(bool)
		**out = **in
	}
	if in.IdpInitiatedSsoRelayState != nil {
		in, out := &in.IdpInitiatedSsoRelayState, &out.IdpInitiatedSsoRelayState
		*out = new(string)
		**out = **in
	}
	if in.IdpInitiatedSsoURLName != nil {
		in, out := &in.IdpInitiatedSsoURLName, &out.IdpInitiatedSsoURLName
		*out = new(string)
		**out = **in
	}
	if in.IncludeAuthnStatement != nil {
		in, out := &in.IncludeAuthnStatement, &out.IncludeAuthnStatement
		*out = new(bool)
		**out = **in
	}
	if in.LoginTheme != nil {
		in, out := &in.LoginTheme, &out.LoginTheme
		*out = new(string)
		**out = **in
	}
	if in.LogoutServicePostBindingURL != nil {
		in, out := &in.LogoutServicePostBindingURL, &out.LogoutServicePostBindingURL
		*out = new(string)
		**out = **in
	}
	if in.LogoutServiceRedirectBindingURL != nil {
		in, out := &in.LogoutServiceRedirectBindingURL, &out.LogoutServiceRedirectBindingURL
		*out = new(string)
		**out = **in
	}
	if in.MasterSAMLProcessingURL != nil {
		in, out := &in.MasterSAMLProcessingURL, &out.MasterSAMLProcessingURL
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NameIDFormat != nil {
		in, out := &in.NameIDFormat, &out.NameIDFormat
		*out = new(string)
		**out = **in
	}
	if in.RealmID != nil {
		in, out := &in.RealmID, &out.RealmID
		*out = new(string)
		**out = **in
	}
	if in.RealmIDRef != nil {
		in, out := &in.RealmIDRef, &out.RealmIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.RealmIDSelector != nil {
		in, out := &in.RealmIDSelector, &out.RealmIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.RootURL != nil {
		in, out := &in.RootURL, &out.RootURL
		*out = new(string)
		**out = **in
	}
	if in.SignAssertions != nil {
		in, out := &in.SignAssertions, &out.SignAssertions
		*out = new(bool)
		**out = **in
	}
	if in.SignDocuments != nil {
		in, out := &in.SignDocuments, &out.SignDocuments
		*out = new(bool)
		**out = **in
	}
	if in.SignatureAlgorithm != nil {
		in, out := &in.SignatureAlgorithm, &out.SignatureAlgorithm
		*out = new(string)
		**out = **in
	}
	if in.SignatureKeyName != nil {
		in, out := &in.SignatureKeyName, &out.SignatureKeyName
		*out = new(string)
		**out = **in
	}
	if in.SigningCertificate != nil {
		in, out := &in.SigningCertificate, &out.SigningCertificate
		*out = new(string)
		**out = **in
	}
	if in.SigningPrivateKey != nil {
		in, out := &in.SigningPrivateKey, &out.SigningPrivateKey
		*out = new(string)
		**out = **in
	}
	if in.ValidRedirectUris != nil {
		in, out := &in.ValidRedirectUris, &out.ValidRedirectUris
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SamlClientInitParameters.
func (in *SamlClientInitParameters) DeepCopy() *SamlClientInitParameters {
	if in == nil {
		return nil
	}
	out := new(SamlClientInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SamlClientList) DeepCopyInto(out *SamlClientList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]SamlClient, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SamlClientList.
func (in *SamlClientList) DeepCopy() *SamlClientList {
	if in == nil {
		return nil
	}
	out := new(SamlClientList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *SamlClientList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SamlClientObservation) DeepCopyInto(out *SamlClientObservation) {
	*out = *in
	if in.AssertionConsumerPostURL != nil {
		in, out := &in.AssertionConsumerPostURL, &out.AssertionConsumerPostURL
		*out = new(string)
		**out = **in
	}
	if in.AssertionConsumerRedirectURL != nil {
		in, out := &in.AssertionConsumerRedirectURL, &out.AssertionConsumerRedirectURL
		*out = new(string)
		**out = **in
	}
	if in.AuthenticationFlowBindingOverrides != nil {
		in, out := &in.AuthenticationFlowBindingOverrides, &out.AuthenticationFlowBindingOverrides
		*out = make([]SamlClientAuthenticationFlowBindingOverridesObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.BaseURL != nil {
		in, out := &in.BaseURL, &out.BaseURL
		*out = new(string)
		**out = **in
	}
	if in.CanonicalizationMethod != nil {
		in, out := &in.CanonicalizationMethod, &out.CanonicalizationMethod
		*out = new(string)
		**out = **in
	}
	if in.ClientID != nil {
		in, out := &in.ClientID, &out.ClientID
		*out = new(string)
		**out = **in
	}
	if in.ClientSignatureRequired != nil {
		in, out := &in.ClientSignatureRequired, &out.ClientSignatureRequired
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.EncryptAssertions != nil {
		in, out := &in.EncryptAssertions, &out.EncryptAssertions
		*out = new(bool)
		**out = **in
	}
	if in.EncryptionCertificate != nil {
		in, out := &in.EncryptionCertificate, &out.EncryptionCertificate
		*out = new(string)
		**out = **in
	}
	if in.EncryptionCertificateSha1 != nil {
		in, out := &in.EncryptionCertificateSha1, &out.EncryptionCertificateSha1
		*out = new(string)
		**out = **in
	}
	if in.ExtraConfig != nil {
		in, out := &in.ExtraConfig, &out.ExtraConfig
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.ForceNameIDFormat != nil {
		in, out := &in.ForceNameIDFormat, &out.ForceNameIDFormat
		*out = new(bool)
		**out = **in
	}
	if in.ForcePostBinding != nil {
		in, out := &in.ForcePostBinding, &out.ForcePostBinding
		*out = new(bool)
		**out = **in
	}
	if in.FrontChannelLogout != nil {
		in, out := &in.FrontChannelLogout, &out.FrontChannelLogout
		*out = new(bool)
		**out = **in
	}
	if in.FullScopeAllowed != nil {
		in, out := &in.FullScopeAllowed, &out.FullScopeAllowed
		*out = new(bool)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IdpInitiatedSsoRelayState != nil {
		in, out := &in.IdpInitiatedSsoRelayState, &out.IdpInitiatedSsoRelayState
		*out = new(string)
		**out = **in
	}
	if in.IdpInitiatedSsoURLName != nil {
		in, out := &in.IdpInitiatedSsoURLName, &out.IdpInitiatedSsoURLName
		*out = new(string)
		**out = **in
	}
	if in.IncludeAuthnStatement != nil {
		in, out := &in.IncludeAuthnStatement, &out.IncludeAuthnStatement
		*out = new(bool)
		**out = **in
	}
	if in.LoginTheme != nil {
		in, out := &in.LoginTheme, &out.LoginTheme
		*out = new(string)
		**out = **in
	}
	if in.LogoutServicePostBindingURL != nil {
		in, out := &in.LogoutServicePostBindingURL, &out.LogoutServicePostBindingURL
		*out = new(string)
		**out = **in
	}
	if in.LogoutServiceRedirectBindingURL != nil {
		in, out := &in.LogoutServiceRedirectBindingURL, &out.LogoutServiceRedirectBindingURL
		*out = new(string)
		**out = **in
	}
	if in.MasterSAMLProcessingURL != nil {
		in, out := &in.MasterSAMLProcessingURL, &out.MasterSAMLProcessingURL
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NameIDFormat != nil {
		in, out := &in.NameIDFormat, &out.NameIDFormat
		*out = new(string)
		**out = **in
	}
	if in.RealmID != nil {
		in, out := &in.RealmID, &out.RealmID
		*out = new(string)
		**out = **in
	}
	if in.RootURL != nil {
		in, out := &in.RootURL, &out.RootURL
		*out = new(string)
		**out = **in
	}
	if in.SignAssertions != nil {
		in, out := &in.SignAssertions, &out.SignAssertions
		*out = new(bool)
		**out = **in
	}
	if in.SignDocuments != nil {
		in, out := &in.SignDocuments, &out.SignDocuments
		*out = new(bool)
		**out = **in
	}
	if in.SignatureAlgorithm != nil {
		in, out := &in.SignatureAlgorithm, &out.SignatureAlgorithm
		*out = new(string)
		**out = **in
	}
	if in.SignatureKeyName != nil {
		in, out := &in.SignatureKeyName, &out.SignatureKeyName
		*out = new(string)
		**out = **in
	}
	if in.SigningCertificate != nil {
		in, out := &in.SigningCertificate, &out.SigningCertificate
		*out = new(string)
		**out = **in
	}
	if in.SigningCertificateSha1 != nil {
		in, out := &in.SigningCertificateSha1, &out.SigningCertificateSha1
		*out = new(string)
		**out = **in
	}
	if in.SigningPrivateKey != nil {
		in, out := &in.SigningPrivateKey, &out.SigningPrivateKey
		*out = new(string)
		**out = **in
	}
	if in.SigningPrivateKeySha1 != nil {
		in, out := &in.SigningPrivateKeySha1, &out.SigningPrivateKeySha1
		*out = new(string)
		**out = **in
	}
	if in.ValidRedirectUris != nil {
		in, out := &in.ValidRedirectUris, &out.ValidRedirectUris
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SamlClientObservation.
func (in *SamlClientObservation) DeepCopy() *SamlClientObservation {
	if in == nil {
		return nil
	}
	out := new(SamlClientObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SamlClientParameters) DeepCopyInto(out *SamlClientParameters) {
	*out = *in
	if in.AssertionConsumerPostURL != nil {
		in, out := &in.AssertionConsumerPostURL, &out.AssertionConsumerPostURL
		*out = new(string)
		**out = **in
	}
	if in.AssertionConsumerRedirectURL != nil {
		in, out := &in.AssertionConsumerRedirectURL, &out.AssertionConsumerRedirectURL
		*out = new(string)
		**out = **in
	}
	if in.AuthenticationFlowBindingOverrides != nil {
		in, out := &in.AuthenticationFlowBindingOverrides, &out.AuthenticationFlowBindingOverrides
		*out = make([]SamlClientAuthenticationFlowBindingOverridesParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.BaseURL != nil {
		in, out := &in.BaseURL, &out.BaseURL
		*out = new(string)
		**out = **in
	}
	if in.CanonicalizationMethod != nil {
		in, out := &in.CanonicalizationMethod, &out.CanonicalizationMethod
		*out = new(string)
		**out = **in
	}
	if in.ClientID != nil {
		in, out := &in.ClientID, &out.ClientID
		*out = new(string)
		**out = **in
	}
	if in.ClientIDRef != nil {
		in, out := &in.ClientIDRef, &out.ClientIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ClientIDSelector != nil {
		in, out := &in.ClientIDSelector, &out.ClientIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.ClientSignatureRequired != nil {
		in, out := &in.ClientSignatureRequired, &out.ClientSignatureRequired
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.EncryptAssertions != nil {
		in, out := &in.EncryptAssertions, &out.EncryptAssertions
		*out = new(bool)
		**out = **in
	}
	if in.EncryptionCertificate != nil {
		in, out := &in.EncryptionCertificate, &out.EncryptionCertificate
		*out = new(string)
		**out = **in
	}
	if in.ExtraConfig != nil {
		in, out := &in.ExtraConfig, &out.ExtraConfig
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.ForceNameIDFormat != nil {
		in, out := &in.ForceNameIDFormat, &out.ForceNameIDFormat
		*out = new(bool)
		**out = **in
	}
	if in.ForcePostBinding != nil {
		in, out := &in.ForcePostBinding, &out.ForcePostBinding
		*out = new(bool)
		**out = **in
	}
	if in.FrontChannelLogout != nil {
		in, out := &in.FrontChannelLogout, &out.FrontChannelLogout
		*out = new(bool)
		**out = **in
	}
	if in.FullScopeAllowed != nil {
		in, out := &in.FullScopeAllowed, &out.FullScopeAllowed
		*out = new(bool)
		**out = **in
	}
	if in.IdpInitiatedSsoRelayState != nil {
		in, out := &in.IdpInitiatedSsoRelayState, &out.IdpInitiatedSsoRelayState
		*out = new(string)
		**out = **in
	}
	if in.IdpInitiatedSsoURLName != nil {
		in, out := &in.IdpInitiatedSsoURLName, &out.IdpInitiatedSsoURLName
		*out = new(string)
		**out = **in
	}
	if in.IncludeAuthnStatement != nil {
		in, out := &in.IncludeAuthnStatement, &out.IncludeAuthnStatement
		*out = new(bool)
		**out = **in
	}
	if in.LoginTheme != nil {
		in, out := &in.LoginTheme, &out.LoginTheme
		*out = new(string)
		**out = **in
	}
	if in.LogoutServicePostBindingURL != nil {
		in, out := &in.LogoutServicePostBindingURL, &out.LogoutServicePostBindingURL
		*out = new(string)
		**out = **in
	}
	if in.LogoutServiceRedirectBindingURL != nil {
		in, out := &in.LogoutServiceRedirectBindingURL, &out.LogoutServiceRedirectBindingURL
		*out = new(string)
		**out = **in
	}
	if in.MasterSAMLProcessingURL != nil {
		in, out := &in.MasterSAMLProcessingURL, &out.MasterSAMLProcessingURL
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NameIDFormat != nil {
		in, out := &in.NameIDFormat, &out.NameIDFormat
		*out = new(string)
		**out = **in
	}
	if in.RealmID != nil {
		in, out := &in.RealmID, &out.RealmID
		*out = new(string)
		**out = **in
	}
	if in.RealmIDRef != nil {
		in, out := &in.RealmIDRef, &out.RealmIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.RealmIDSelector != nil {
		in, out := &in.RealmIDSelector, &out.RealmIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.RootURL != nil {
		in, out := &in.RootURL, &out.RootURL
		*out = new(string)
		**out = **in
	}
	if in.SignAssertions != nil {
		in, out := &in.SignAssertions, &out.SignAssertions
		*out = new(bool)
		**out = **in
	}
	if in.SignDocuments != nil {
		in, out := &in.SignDocuments, &out.SignDocuments
		*out = new(bool)
		**out = **in
	}
	if in.SignatureAlgorithm != nil {
		in, out := &in.SignatureAlgorithm, &out.SignatureAlgorithm
		*out = new(string)
		**out = **in
	}
	if in.SignatureKeyName != nil {
		in, out := &in.SignatureKeyName, &out.SignatureKeyName
		*out = new(string)
		**out = **in
	}
	if in.SigningCertificate != nil {
		in, out := &in.SigningCertificate, &out.SigningCertificate
		*out = new(string)
		**out = **in
	}
	if in.SigningPrivateKey != nil {
		in, out := &in.SigningPrivateKey, &out.SigningPrivateKey
		*out = new(string)
		**out = **in
	}
	if in.ValidRedirectUris != nil {
		in, out := &in.ValidRedirectUris, &out.ValidRedirectUris
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SamlClientParameters.
func (in *SamlClientParameters) DeepCopy() *SamlClientParameters {
	if in == nil {
		return nil
	}
	out := new(SamlClientParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SamlClientSpec) DeepCopyInto(out *SamlClientSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SamlClientSpec.
func (in *SamlClientSpec) DeepCopy() *SamlClientSpec {
	if in == nil {
		return nil
	}
	out := new(SamlClientSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SamlClientStatus) DeepCopyInto(out *SamlClientStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SamlClientStatus.
func (in *SamlClientStatus) DeepCopy() *SamlClientStatus {
	if in == nil {
		return nil
	}
	out := new(SamlClientStatus)
	in.DeepCopyInto(out)
	return out
}
